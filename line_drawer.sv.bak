/* Given two points on the screen this module draws a line between
 * those two points by coloring necessary pixels
 *
 * Inputs:
 *   clk    - should be connected to a 50 MHz clock
 *   reset  - resets the module and starts over the drawing process
 *	 x0 	- x coordinate of the first end point
 *   y0 	- y coordinate of the first end point
 *   x1 	- x coordinate of the second end point
 *   y1 	- y coordinate of the second end point
 *
 * Outputs:
 *   x 		- x coordinate of the pixel to color
 *   y 		- y coordinate of the pixel to color
 *   done	- flag that line has finished drawing
 *
 */
module line_drawer(clk, reset, x0, y0, x1, y1, x, y, done);
	input logic clk, reset;
	input logic [10:0]	x0, y0, x1, y1;
	output logic done;
	output logic [10:0]	x, y;
	
	/* You'll need to create some registers to keep track of things
	 * such as error and direction.
	 */

	// intermediate registers
	logic [10:0] abs_x, abs_y, new_x0, new_y0, new_x1, new_y1, result_x, result_y;
	// registers specified in Bresenham's line algorithm pseudocode
	logic signed [11:0] error;  // example - feel free to change/delete
	logic [10:0] delta_x, delta_y;
	logic is_steep, y_step;

	// state declaration
	enum {s_load, s_holup0, s_holup1, s_holup2, s_comp, s_done} ps, ns;

	// reset and state logic
	always_ff @(posedge clk) begin
		if (reset) ps <= s_load;
		else ps <= ns;
	end

	// ps, ns logic
	always_comb begin
		case (ps)
			s_load: ns = s_holup0;
			s_holup0: ns = s_holup1;
			s_holup1: ns = s_holup2;
			s_holup2: ns = s_comp; 
			s_comp: ns = (done) ? s_done : s_comp;
			s_done: ns = s_done;
		endcase
	end

	// assign statements (assumes inputs doesn't change until done)
	always_comb begin
		if (ps == s_load) begin
			abs_x = (x1 - x0 < 0) ? -(x1 - x0) : (x1 - x0);
			abs_y = (y1 - y0 < 0) ? -(y1 - y0) : (y1 - y0);
			is_steep = abs_y > abs_x;
		end 
	end

	/*
	// find absolute values of x & y
	assign abs_x = (x1 - x0 < 0) ? -(x1 - x0) : (x1 - x0);
	assign abs_y = (y1 - y0 < 0) ? -(y1 - y0) : (y1 - y0);
	// check if line is too steep
	assign is_steep = abs_y > abs_x;

	always_ff @(posedge clk) begin
		// register x & y values on reset
		if (reset) begin
			abs_x <= (x1 - x0 < 0) ? -(x1 - x0) : (x1 - x0);
			abs_y <= (y1 - y0 < 0) ? -(y1 - y0) : (y1 - y0);
		end
		// check line steepness
		is_steep <= abs_y > abs_x;
	end
	*/

	// assign new_x & new_y values
	always_ff @(posedge clk) begin
		// default case
		if (ps == s_load) begin
			new_x0 <= x0;
			new_y0 <= y0;
			new_x1 <= x1;
			new_y1 <= y1;
		end
		// other conditions
		if (is_steep) begin
			new_x0 <= new_y0;
			new_y0 <= new_x0;
			new_x1 <= new_y1;
			new_y1 <= new_x1;
		end
		if (new_x0 > new_x1) begin
			new_x0 <= new_x1;
			new_x1 <= new_x0;
			new_y0 <= new_y1;
			new_y1 <= new_y0;
		end
	end

	// assign delta_x & delta_y
	assign delta_x = new_x1 - new_x0;
	assign delta_y = abs_y;
	assign y_step = (new_y0 < new_y1) ? 1 : 0;

	// pixel drawing logic
	always_ff @(posedge clk) begin
		// reset logic
		if (ps == s_comp) begin
			error <= -(delta_x / 2);
			result_x <= new_x0;
			result_y <= new_y0;
			done <= 0;
		end
		// only run when circuit is not done
		if (~done) begin
			// line logic
			if (is_steep) begin
				// most likely incorrect
				y <= result_x;
				x <= result_y;
			end else begin
				// only accounts for horizontal line currently
				x <= result_x;
				y <= result_y;
			end
			// update error - error indicates when to increment y
			error <= error + delta_y;
			if (error >= 0) begin
				if (y_step) begin
					result_y <= result_y + 1;
				end else
					result_y <= result_y - 1;
				error <= error - delta_x;
			end
			// update status, circuit is done when counter matches delta_x
			if (result_x == new_x1) begin
				done <= 1;
			end
			result_x <= result_x + 1;
		end
	end  // always_ff
endmodule  // line_drawer


module line_drawer_testbench();
	logic clk, reset;
	logic [10:0] x0, y0, x1, y1;
	logic done;
	logic [10:0] x, y;

	line_drawer dut (.*);

	// simulated clock
	parameter period = 100;
    initial begin
        clk <= 0;
        forever begin
            #(period/2)
            clk <= ~clk;
        end
    end

	// begin tests
	initial begin
		// Pre-test setup
		reset <= 0;														@(posedge clk);
		/*
		// TEST 1: (0, 0) -> (10, 0)
		// Expected: x outputs 0 to 10 (inclusive), y remains unchanged.
		reset <= 1; x0 <= 0; y0 <= 0; x1 <= 10; y1 <= 0; 				@(posedge clk);
		reset <= 0;											repeat(16) 	@(posedge clk);

		// TEST 2: (10, 0) -> (0, 0)
		// Expected: x outputs 0 to 10, y remains unchanged.
		reset <= 1; x0 <= 10; y0 <= 0; x1 <= 0; y1 <= 0; 				@(posedge clk);
		reset <= 0;											repeat(32) 	@(posedge clk);
		*/
		// TEST 3: (0, 0) -> (10, 5)
		// Expected: x outputs 0 to 10, y increments every two x increments.
		reset <= 1; x0 <= 0; y0 <= 0; x1 <= 10; y1 <= 5; 				@(posedge clk);
		reset <= 0;											repeat(32) 	@(posedge clk);
		$stop;
	end
endmodule // line_drawer_testbench